import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

def test_prompts():
    """다양한 프롬프트 실험"""
    prompts = [
        "좋은 하루 보내세요!",
        "이번 주 서울 날씨 어때요?",                            # '서울'로 구체화 + '날씨' 키워드 참고하도록 함
        "Python에서 리스트와 딕셔너리 차이는?",
        "생산성 향상 팁 3가지 알려줘"
    ]

    for i, prompt in enumerate(prompts):
        try:
            # '날씨'라는 키워드가 포함된 경우, 시스템 메시지 추가
            if "날씨" in prompt:
                system_message = {
                    "role": "system",
                    "content": (
                        "실시간 정보는 제공할 수 없지만, 지역과 계절 정보를 바탕으로 "
                        "일반적인 날씨 경향을 설명하고, 신뢰할 수 있는 날씨 정보 확인 방법도 함께 안내해 주세요."
                    )
                }
                messages = [system_message, {"role": "user", "content": prompt}]
            else:
                messages = [{"role": "user", "content": prompt}]

            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=350,                                         # 100 → 350로 답의 차이를 확인
                temperature=0.5
            )

            print(f"[{i+1}] 프롬프트: {prompt}")
            print("응답:", response.choices[0].message.content)
            print("---")

        except Exception as e:
            print(f"오류 발생 [{i+1}]:", str(e))

if __name__ == "__main__":
    test_prompts()
    

"""
    - 셀 출력

        [1] 프롬프트: 좋은 하루 보내세요!
        응답: 좋은 하루 보내세요! 궁금한 점이나 도움이 필요하시면 언제든지 말씀해 주세요.
        ---
        [2] 프롬프트: 이번 주 서울 날씨 어때요?
        응답: 실시간 날씨 정보를 제공할 수는 없지만, 서울의 날씨는 일반적으로 계절에 따라 다릅니다. 예를 들어, 봄(3월~5월)에는 따뜻하고 꽃이 피는 날씨가 많고, 여름(6월~8월)에는 덥고 습한 날씨가 이어집니다. 가을(9월~11월)에는 선선하고 맑은 날씨가 많으며, 겨울(12월~2월)에는 춥고 눈이 올 가능성이 있습니다.

        정확한 날씨 정보를 원하신다면, 기상청 웹사이트나 날씨 앱을 통해 최신 정보를 확인하시기를 권장합니다. 이러한 플랫폼에서는 일기 예보, 기온, 강수 확률 등을 상세히 제공하고 있습니다.
        ---
        [3] 프롬프트: Python에서 리스트와 딕셔너리 차이는?
        응답: Python에서 리스트(List)와 딕셔너리(Dictionary)는 모두 데이터 구조이지만, 그 용도와 특성이 다릅니다. 아래는 그 차이점에 대한 요약입니다.

        ### 리스트 (List)
        1. **정의**: 순서가 있는 요소의 집합입니다. 대괄호 `[]`로 정의합니다.
        2. **인덱스**: 각 요소는 0부터 시작하는 인덱스를 통해 접근할 수 있습니다.
        3. **중복**: 동일한 값을 가진 요소를 여러 번 포함할 수 있습니다.
        4. **변경 가능성**: 리스트는 mutable(변경 가능)한 자료형입니다. 즉, 생성 후에도 요소를 추가하거나 삭제할 수 있습니다.
        5. **용도**: 순서가 중요한 데이터의 집합을 다룰 때 사용됩니다. 예를 들어, 학생의 성적, 쇼핑 목록 등.

        ```python
        # 리스트 예시
        fruits = ['apple', 'banana', 'cherry']
        print(fruits[1])  # 출력: banana
        ```

        ### 딕셔너리 (Dictionary)
        1. **정의**: 키-값 쌍의 집합입니다. 중괄호 `{}`로 정의합니다.
        2. **키**: 각 요소는 고유한 키를 통해 접근하며, 키는 해시 가능해야 합니다(예: 문자열, 숫자, 튜플 등).
        3. **중복**: 키는 중복될 수 없지만, 동일한 값을 가진 여러 키는 가능합니다.
        4. **변경 가능성**: 딕셔너리도 mutable(변경 가능)
        ---
        [4] 프롬프트: 생산성 향상 팁 3가지 알려줘
        응답: 생산성을 향상시키기 위한 팁 3가지는 다음과 같습니다:

        1. **우선순위 설정**: 하루의 업무를 시작하기 전에 가장 중요한 일부터 우선순위를 정하세요. '아이젠하워 매트릭스'와 같은 도구를 사용하면 긴급성과 중요성을 기준으로 업무를 분류할 수 있습니다. 이를 통해 시간과 에너지를 가장 중요한 일에 집중할 수 있습니다.

        2. **Pomodoro 기법 활용**: 25분 동안 집중해서 작업한 후 5분 동안 휴식을 취하는 Pomodoro 기법을 활용해 보세요. 이 방법은 집중력을 높이고, 피로감을 줄이며, 작업의 효율성을 높이는 데 도움이 됩니다. 4번의 Pomodoro 후에는 더 긴 휴식을 취하세요.

        3. **디지털 환경 정리**: 작업 환경이 깔끔하면 집중력이 향상됩니다. 컴퓨터 바탕화면이나 파일 정리를 통해 불필요한 정보를 줄이고, 방해 요소를 최소화하세요. 또한, 알림을 관리하고 소셜 미디어 사용 시간을 제한하여 집중할 수 있는 환경을 조성하는 것이 중요합니다.

        이 팁들을 통해 생산성을 높이는 데 도움이 되길 바랍니다!
        ---
    
    - 문제점
        - 날씨는 여전히 실시간 정보를 가져오지 못함  → 날씨 프롬프트를 더 고민할 필요 
        - 리스트와 딕셔너리의 차이는 max_tokens를 100 → 350으로 늘렸지만 여전히 확인이 어려웠음 = `02_basic_chat.py`에서의 문제점이 반복됨

"""    
